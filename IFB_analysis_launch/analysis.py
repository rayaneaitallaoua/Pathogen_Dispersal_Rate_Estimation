import glob
import math
import os
import subprocess
import matplotlib.pyplot as plt
from Bio import SeqIO
from numpy import random
import pandas as pd

mcmc_chain_length = 10000000
burn_in_value = mcmc_chain_length*0.1
g_mut_rate = 1E-6
radii = list(range(1,10))

def generate_gspace_settings_circular_sample(output_dir=".",
                                             r=3,
                                             lattice_size_x=100,
                                             lattice_size_y=100,
                                             mutation_rate=g_mut_rate,
                                             num_sampled_nodes=4,
                                             ind_per_node_sampled=5):
    # find lattice center
    lattice_center = (lattice_size_x // 2, lattice_size_y // 2)
    sampled_positions = set()

    # find the neighbour node presenting the least distance
    def closest_lattice_node(x, y):

        # candidates are the 4 neighbouring nodes
        candidates = [(math.floor(x), math.floor(y)),
                      (math.floor(x), math.ceil(y)),
                      (math.ceil(x), math.floor(y)),
                      (math.ceil(x), math.ceil(y))]

        # define a lambda  function that returns the distance between our point pt and the candidates,
        # iterates over candidates
        return min(candidates, key=lambda pt: math.dist((x, y), pt))

    # generate random phi and r' values
    while len(sampled_positions) < num_sampled_nodes:
        phi = random.uniform(0, 2 * math.pi)
        r_prime = random.uniform(0, r)

        # convert Polar coordinates to Cartesian
        x = lattice_center[0] + r_prime * math.cos(phi)
        y = lattice_center[1] + r_prime * math.sin(phi)

        node = closest_lattice_node(x, y)

        # Ensure node is inside the lattice bounds
        if 0 <= node[0] < lattice_size_x and 0 <= node[1] < lattice_size_y:
            sampled_positions.add(node)

    sample_x = ",".join(str(pos[0]) for pos in sampled_positions)
    sample_y = ",".join(str(pos[1]) for pos in sampled_positions)

    gspace_settings = f"""%%%%%%%% SIMULATION SETTINGS %%%%%%%%%%%%%%%
Data_filename=sim_seqs_r_{r}
Run_Number=1

%%%%%%%% OUTPUT FILE FORMAT SETTINGS %%%%%%%
Output_Dir=.
%Coordinate_file=true
Sequence_characteristics_file=true
Fasta=true
Fasta_Single_Line_Seq=True

%%%%%%%% MARKERS SETTINGS %%%%%%%%%%%%%%%%%%
Ploidy=Haploid
Chromosome_number=1
Sequence_Size=1000
Mutation_Model=HKY
Mutation_Rate={mutation_rate}

%%%%%%%% RECOMBINATION SETTINGS %%%%%%%%%%%%
Recombination_Rate=0

%%%%%%%% DEMOGRAPHIC SETTINGS %%%%%%%%%%%%%%
%% LATTICE
Lattice_Size_X={lattice_size_x}
Lattice_Size_Y={lattice_size_y}
Ind_Per_Pop=30

%% DISPERSAL
Dispersal_Distribution=uniform
Disp_Dist_Max=1,1
Total_Emigration_Rate=0.05

%%%%%%%% SAMPLE SETTINGS %%%%%%%%%%%%%%%%%%%
Sample_Size_X={len(sample_x.split(","))}
Sample_Size_Y={len(sample_y.split(","))}

%% Lattice center: {lattice_center} %%
SampleCoordinateX={sample_x}
SampleCoordinateY={sample_y}
Ind_Per_Node_Sampled={ind_per_node_sampled}
%%%%%% VARIOUS COMPUTATION OPTION S%%%%%%%%%
%Diagnostic_Tables = Effective_Dispersal%
"""

    # Write to file
    with open(f'{output_dir}/GSpaceSettings.txt', "w") as f:
        f.write(gspace_settings)

    print(f"GSpaceSettings.txt for r={r} generated with circular sampling in {output_dir}!")
    return sampled_positions

def run_gspace(gspace_dir="../../GSpace/build/GSpace"):
    # 1. Get GSpace executable
    gspace_executable = f"{gspace_dir}"

    # 2. Check if executable exists and run
    if os.path.isfile(gspace_executable):
        subprocess.run([gspace_executable])
    else:
        print(f"Error: {gspace_executable} not found.")

def generate_beast_xml(output_xml="output.xml",
                       mutation_rate=g_mut_rate,
                       chain_length=10000000):
    fa_files = [os.path.abspath(f) for f in glob.glob("*.fa")]

    for file in fa_files:

        file_name = os.path.basename(file)

        records = list(SeqIO.parse(file_name, "fasta"))[1:]  # Skip ancestral sequence

        xml = '<?xml version="1.0" standalone="yes"?>\n'
        xml += '<beast version="1.10.4">'
        xml += " <!-- Generated by Rayane Ayoub AIT ALLAOUA - LIRMM 2025                  -->\n\n"

        # Taxa block
        xml += '\t<taxa id="taxa">\n'
        for record in records:
            seq_id = record.id
            parts = seq_id.split('_')
            idx = parts.index('coord')
            lat = float(parts[idx + 1]) + 0.1
            long = float(parts[idx + 2]) + 0.1
            xml += f'\t\t<taxon id="{seq_id}">\n'
            xml += f'\t\t\t<attr name="lat">{lat}</attr>\n'
            xml += f'\t\t\t<attr name="long">{long}</attr>\n'
            xml += f"""			<!-- START Multivariate diffusion model                                      -->
                <attr name="coordinates">
                    {lat} {long}
                </attr>

                <!-- END Multivariate diffusion model                                        -->"""
            xml += f'\t\t</taxon>\n'
        xml += '\t</taxa>\n\n'

        # taxonSet block
        xml += '\t<taxa id="taxonSet">\n'
        for record in records:
            seq_id = record.id
            xml += f'\t\t<taxon idref="{seq_id}"/>\n'
        xml += '</taxa>\n\n'

        # Alignment block
        xml += f"\t<!-- ntax={len(records)} | nchar={len(records[0])}-->\n"
        xml += '\t<alignment id="alignment" dataType="nucleotide">\n'
        for record in records:
            xml += f'\t\t<sequence>\n'
            xml += f'\t\t\t<taxon idref="{record.id}"/>\n'
            xml += f'\t\t\t{str(record.seq)}\n'
            xml += f'\t\t</sequence>\n'
        xml += '\t</alignment>\n\n'

        # patterns block
        xml += """  <!-- The unique patterns from 1 to end                                       -->
            <patterns id="patterns" from="1" strip="false">
                <alignment idref="alignment"/>
            </patterns>\n\n"""

        # Population size block
        xml += """  <!-- A prior assumption that the population size has remained constant       -->
            <!-- throughout the time spanned by the genealogy.                           -->
            <constantSize id="constant" units="years">
                <populationSize>
                    <parameter id="constant.popSize" value="1.0" lower="0.0"/>
                </populationSize>
            </constantSize>\n\n"""

        # Starting tree block
        xml += """  <!-- Generate a random starting tree under the coalescent process            -->
            <coalescentSimulator id="startingTree">
                <coalescentSimulator>
                    <taxa idref="taxonSet"/>
                    <constantSize idref="constant"/>
                </coalescentSimulator>
                <taxa idref="taxa"/>
                <constantSize idref="constant"/>
            </coalescentSimulator>\n\n"""

        # Tree model block
        xml += """  <!-- Generate a tree model                                                   -->
            <treeModel id="treeModel">
                <coalescentTree idref="startingTree"/>
                <rootHeight>
                    <parameter id="treeModel.rootHeight"/>
                </rootHeight>
                <nodeHeights internalNodes="true">
                    <parameter id="treeModel.internalNodeHeights"/>
                </nodeHeights>
                <nodeHeights internalNodes="true" rootNode="true">
                    <parameter id="treeModel.allInternalNodeHeights"/>
                </nodeHeights>
            </treeModel>

        <!-- Statistic for height of the root of the tree                            -->
        <treeHeightStatistic id="rootHeight">
            <treeModel idref="treeModel"/>
        </treeHeightStatistic>

        <!-- Statistic for sum of the branch lengths of the tree (tree length)       -->
        <treeLengthStatistic id="treeLength">
            <treeModel idref="treeModel"/>
        </treeLengthStatistic>

        <!-- Statistic for time of most recent common ancestor of tree               -->
        <tmrcaStatistic id="age(root)" absolute="true">
            <treeModel idref="treeModel"/>
        </tmrcaStatistic>

        <!-- Taxon Sets                                                              -->

        <tmrcaStatistic id="tmrca(taxonSet)" absolute="false" includeStem="true">
            <mrca>
                <taxa idref="taxonSet"/>
            </mrca>
            <treeModel idref="treeModel"/>
        </tmrcaStatistic>
        <tmrcaStatistic id="age(taxonSet)" absolute="true" includeStem="true">
            <mrca>
                <taxa idref="taxonSet"/>
            </mrca>
            <treeModel idref="treeModel"/>
        </tmrcaStatistic>
        <monophylyStatistic id="monophyly(taxonSet)">
            <mrca>
                <taxa idref="taxonSet"/>
            </mrca>
            <treeModel idref="treeModel"/>
        </monophylyStatistic>\n\n
        """

        # Coalescent likelihood block
        xml += """
            <!-- Generate a coalescent likelihood                                        -->
        <coalescentLikelihood id="coalescent">
            <model>
                <constantSize idref="constant"/>
            </model>
            <populationTree>
                <treeModel idref="treeModel"/>
            </populationTree>
        </coalescentLikelihood>\n\n
        """

        # Molecular clock
        xml += f"""
        <!-- The uncorrelated relaxed clock (Drummond, Ho, Phillips & Rambaut (2006) PLoS Biology 4, e88 )-->
        <discretizedBranchRates id="branchRates">
            <treeModel idref="treeModel"/>
            <distribution>
                <logNormalDistributionModel meanInRealSpace="true">
                    <mean>
                        <parameter id="ucld.mean" value="{mutation_rate}"/>
                    </mean>
                    <stdev>
                        <parameter id="ucld.stdev" value="0.3333333333333333" lower="0.0"/>
                    </stdev>
                </logNormalDistributionModel>
            </distribution>
            <rateCategories>
                <parameter id="branchRates.categories"/>
            </rateCategories>
        </discretizedBranchRates>

        <rateStatistic id="meanRate" name="meanRate" mode="mean" internal="true" external="true">
            <treeModel idref="treeModel"/>
            <discretizedBranchRates idref="branchRates"/>
        </rateStatistic>

        <rateStatistic id="coefficientOfVariation" name="coefficientOfVariation" mode="coefficientOfVariation" internal="true" external="true">
            <treeModel idref="treeModel"/>
            <discretizedBranchRates idref="branchRates"/>
        </rateStatistic>

        <rateCovarianceStatistic id="covariance" name="covariance">
            <treeModel idref="treeModel"/>
            <discretizedBranchRates idref="branchRates"/>
        </rateCovarianceStatistic>\n\n"""

        # Substitution Model (HKY)
        xml += "<!-- The HKY substitution model (Hasegawa, Kishino & Yano, 1985)             -->\n"
        xml += '\t<HKYModel id="hky">\n'
        xml += '\t\t<kappa>\n\t\t\t<parameter id="kappa" value="2.0" lower="0.0"/>\n\t\t</kappa>\n'
        xml += """
            <frequencies>
                <frequencyModel dataType="nucleotide">
                    <frequencies>
                        <parameter id="frequencies" value="0.25 0.25 0.25 0.25"/>
                    </frequencies>
                </frequencyModel>
            </frequencies>
        """
        xml += '\t</HKYModel>\n\n'

        # Site Model
        xml += '\t<siteModel id="siteModel">\n'
        xml += '\t\t<substitutionModel>\n'
        xml += '\t\t\t<HKYModel idref="hky"/>'
        xml += '\t\t</substitutionModel>\n'
        xml += '\t</siteModel>\n\n'
        xml += """
            <statistic id="mu" name="mu">
                <siteModel idref="siteModel"/>
            </statistic>\n\n"""

        # Multivariate diffusion model
        xml += """
        <!-- START Multivariate diffusion model                                      -->

        <multivariateDiffusionModel id="coordinates.diffusionModel">
            <precisionMatrix>
                <matrixParameter id="coordinates.precision">
                    <parameter id="coordinates.precision.col1" value="0.05 0.002"/>
                    <parameter id="coordinates.precision.col2" value="0.002 0.05"/>
                </matrixParameter>
            </precisionMatrix>
        </multivariateDiffusionModel>

        <multivariateWishartPrior id="coordinates.precisionPrior" df="2">
            <scaleMatrix>
                <matrixParameter>
                    <parameter value="1.0 0.0"/>
                    <parameter value="0.0 1.0"/>
                </matrixParameter>
            </scaleMatrix>
            <data>
                <parameter idref="coordinates.precision"/>
            </data>
        </multivariateWishartPrior>\n
        """

        # trait data likelihood
        xml += """
        <traitDataLikelihood id="coordinates.traitLikelihood" traitName="coordinates" useTreeLength="true" scaleByTime="true" reportAsMultivariate="true" reciprocalRates="false" integrateInternalTraits="true">
            <multivariateDiffusionModel idref="coordinates.diffusionModel"/>
            <treeModel idref="treeModel"/>
            <traitParameter>
                <parameter id="leaf.coordinates"/>
            </traitParameter>
            <conjugateRootPrior>
                <meanParameter>
                    <parameter value="0.0 0.0"/>
                </meanParameter>
                <priorSampleSize>
                    <parameter value="0.000001"/>
                </priorSampleSize>
            </conjugateRootPrior>
        </traitDataLikelihood>
        <correlation id="coordinates.correlation" dimension1="1" dimension2="2">
            <matrixParameter idref="coordinates.precision"/>
        </correlation>
        <matrixInverse id="coordinates.varCovar">
            <matrixParameter idref="coordinates.precision"/>
        </matrixInverse>
        <traitDataContinuousDiffusionStatistic id="coordinates.diffusionRate" traitName="coordinates" displacementScheme="linear" scalingScheme="dependent" weightingScheme="weighted">
            <traitDataLikelihood idref="coordinates.traitLikelihood"/>
        </traitDataContinuousDiffusionStatistic>

        <!-- END Multivariate diffusion model                                        -->\n\n"""

        # Tree likelihood block

        xml += """
            <treeDataLikelihood id="treeLikelihood" useAmbiguities="false" usePreOrder="false">
            <partition>
                <patterns idref="patterns"/>
                <siteModel idref="siteModel"/>
            </partition>
            <treeModel idref="treeModel"/>
            <discretizedBranchRates idref="branchRates"/>
        </treeDataLikelihood>\n\n"""

        # Operators block

        xml += """
            <!-- Define operators                                                        -->
        <operators id="operators" optimizationSchedule="log">
            <scaleOperator scaleFactor="0.75" weight="1">
                <parameter idref="kappa"/>
            </scaleOperator>
            <deltaExchange delta="0.01" weight="1">
                <parameter idref="frequencies"/>
            </deltaExchange>
            <scaleOperator scaleFactor="0.75" weight="3">
                <parameter idref="ucld.stdev"/>
            </scaleOperator>
            <swapOperator size="1" weight="10" autoOptimize="false">
                <parameter idref="branchRates.categories"/>
            </swapOperator>
            <uniformIntegerOperator weight="10">
                <parameter idref="branchRates.categories"/>
            </uniformIntegerOperator>
            <subtreeLeap size="1.0" weight="30">
                <treeModel idref="treeModel"/>
            </subtreeLeap>
            <fixedHeightSubtreePruneRegraft weight="3">
                <treeModel idref="treeModel"/>
            </fixedHeightSubtreePruneRegraft>
            <scaleOperator scaleFactor="0.75" weight="3">
                <parameter idref="constant.popSize"/>
            </scaleOperator>

            <!-- START Multivariate diffusion model                                      -->
            <precisionGibbsOperator weight="2">
                <wishartStatistics traitName="coordinates">
                    <traitDataLikelihood idref="coordinates.traitLikelihood"/>
                </wishartStatistics>
                <multivariateWishartPrior idref="coordinates.precisionPrior"/>
            </precisionGibbsOperator>

            <!-- END Multivariate diffusion model                                        -->

        </operators> \n\n"""
        # MCMC Block
        xml += f'\t	<mcmc id="mcmc" chainLength="{chain_length}" autoOptimize="true" operatorAnalysis="{file_name}.ops">\n'
        xml += f"""
                <joint id="joint">
                <prior id="prior">
                    <logNormalPrior mu="1.0" sigma="1.25" offset="0.0">
                        <parameter idref="kappa"/>
                    </logNormalPrior>
                    <dirichletPrior alpha="1.0" sumsTo="1.0">
                        <parameter idref="frequencies"/>
                    </dirichletPrior>
                    <exponentialPrior mean="0.3333333333333333" offset="0.0">
                        <parameter idref="ucld.stdev"/>
                    </exponentialPrior>
                    <gammaPrior shape="0.001" scale="1000.0" offset="0.0">
                        <parameter idref="constant.popSize"/>
                    </gammaPrior>
                    <coalescentLikelihood idref="coalescent"/>


                    <discretizedBranchRates idref="branchRates"/>

                    <!-- START Multivariate diffusion model                                      -->
                    <multivariateWishartPrior idref="coordinates.precisionPrior"/>

                    <!-- END Multivariate diffusion model                                        -->

                </prior>
                <likelihood id="likelihood">
                    <treeDataLikelihood idref="treeLikelihood"/>

                    <!-- START Multivariate diffusion model                                      -->
                    <traitDataLikelihood idref="coordinates.traitLikelihood"/>

                    <!-- END Multivariate diffusion model                                        -->

                </likelihood>
            </joint>
            <operators idref="operators"/>

            <!-- write log to screen                                                     -->
            <log id="screenLog" logEvery="1000">
                <column label="Joint" dp="4" width="12">
                    <joint idref="joint"/>
                </column>
                <column label="Prior" dp="4" width="12">
                    <prior idref="prior"/>
                </column>
                <column label="Likelihood" dp="4" width="12">
                    <likelihood idref="likelihood"/>
                </column>
                <column label="age(root)" sf="6" width="12">
                    <tmrcaStatistic idref="age(root)"/>
                </column>
            </log>

            <!-- write log to file                                                       -->
            <log id="fileLog" logEvery="1000" fileName="{file_name}.log" overwrite="false">
                <joint idref="joint"/>
                <prior idref="prior"/>
                <likelihood idref="likelihood"/>
                <treeHeightStatistic idref="rootHeight"/>
                <tmrcaStatistic idref="age(root)"/>
                <treeLengthStatistic idref="treeLength"/>
                <tmrcaStatistic idref="tmrca(taxonSet)"/>
                <tmrcaStatistic idref="age(taxonSet)"/>
                <parameter idref="constant.popSize"/>
                <parameter idref="kappa"/>
                <parameter idref="frequencies"/>
                <parameter idref="ucld.mean"/>
                <parameter idref="ucld.stdev"/>
                <rateStatistic idref="meanRate"/>
                <rateStatistic idref="coefficientOfVariation"/>
                <rateCovarianceStatistic idref="covariance"/>

                <!-- START Multivariate diffusion model                                      -->
                <matrixParameter idref="coordinates.precision"/>
                <correlation idref="coordinates.correlation"/>
                <matrixInverse idref="coordinates.varCovar"/>
                <traitDataContinuousDiffusionStatistic idref="coordinates.diffusionRate"/>

                <!-- END Multivariate diffusion model                                        -->

                <treeDataLikelihood idref="treeLikelihood"/>
                <discretizedBranchRates idref="branchRates"/>

                <!-- START Multivariate diffusion model                                      -->
                <traitDataLikelihood idref="coordinates.traitLikelihood"/>

                <!-- END Multivariate diffusion model                                        -->

                <coalescentLikelihood idref="coalescent"/>

            </log>

            <!-- write tree log to file                                                  -->
            <logTree id="treeFileLog" logEvery="1000" nexusFormat="true" fileName="{file_name}.trees" sortTranslationTable="true">
                <treeModel idref="treeModel"/>
                <trait name="rate" tag="rate">
                    <discretizedBranchRates idref="branchRates"/>
                </trait>
                <joint idref="joint"/>

                <!-- START Ancestral state reconstruction                                    -->
                <trait name="coordinates" tag="coordinates">
                    <traitDataLikelihood idref="coordinates.traitLikelihood"/>
                </trait>

                <!-- END Ancestral state reconstruction                                      -->


                <!-- START Multivariate diffusion model                                      -->
                <multivariateDiffusionModel idref="coordinates.diffusionModel"/>
                <traitDataLikelihood idref="coordinates.traitLikelihood"/>

                <!-- END Multivariate diffusion model                                        -->

            </logTree>

            <!-- write state of Markov chain to checkpoint file                          -->
            <logCheckpoint id="checkpointFileLog" checkpointEvery="{chain_length / 10}" checkpointFinal="{chain_length}" fileName="{file_name}.chkpt" overwrite="false"/>
        </mcmc>"""

        xml += '</beast>\n'

        with open(output_xml, 'w') as f:
            f.write(xml)

        print(f"For file: {file_name} BEAST XML generated: {output_xml}")

def run_beast(xml_file, beast_path):
    if not os.path.isfile(xml_file):
        raise FileNotFoundError(f"XML file not found: {xml_file}")

    if not os.path.isfile(beast_path):
        raise FileNotFoundError(f"BEAST executable not found: {beast_path}")

    try:
        result = subprocess.run(
            [beast_path, xml_file],
            check=True
        )
        print("BEAST ran successfully.")
        return result.returncode
    except subprocess.CalledProcessError as e:
        print(f"BEAST failed with return code {e.returncode}")
        return e.returncode

def extract_dispersal_rate(burn_in):

    # Path to your BEAST log file
    log_file_path = glob.glob("*.log")[0]

    # Read the file, skipping lines starting with #
    df = pd.read_csv(
        log_file_path,
        comment='#',  # skips all lines starting with #
        delimiter='\t'  # tab-separated columns
    )

    # Filter the DataFrame to only include rows where state >= burn_in as seen on Tracer
    filtered_df = df[df["state"] > burn_in]

    # Extract the 'coordinates.diffusionRate' column
    diffusion_rates = filtered_df["coordinates.diffusionRate"]

    # return the result
    return diffusion_rates.mean(), diffusion_rates.std()

def plot_dispersal_rates(radii,
                         mean_dispersal_rates,
                         std_dispersal_rates):

    plt.figure(figsize=(16, 10))

    # Plot with error bars
    plt.errorbar(
        x=radii,
        y=mean_dispersal_rates,
        yerr=std_dispersal_rates,
        fmt='o-',  # line + dots
        ecolor='gray',
        capsize=5,
        label='Mean dispersal rate'
    )

    plt.xlabel("Radius")
    plt.ylabel("Mean Dispersal Rate")
    plt.title("Mean Dispersal Rate per Radius")
    plt.legend()
    plt.grid(True)

    plt.tight_layout()
    plt.savefig("mean_dispersal_rate.png")

def run_analysis():

    df_dict = {
        "radius": [],
        "mean_dispersal_rate": [],
        "std_dispersal_rate": [],
    }

    for radius in radii:

        print(f"----------------Processing radius {radius}...----------------")
        os.mkdir(f"./{radius}")
        os.chdir(f"./{radius}")

        generate_gspace_settings_circular_sample(r=radius)
        run_gspace(gspace_dir="../../../GSpace/build/GSpace")

        xml_file = f"r_{radius}.xml"
        generate_beast_xml(output_xml=xml_file,chain_length=mcmc_chain_length)
        run_beast(xml_file=xml_file,beast_path="../../../BEAST/bin/beast")

        mean, std = extract_dispersal_rate(burn_in=burn_in_value)

        df_dict["radius"].append(radius)
        df_dict["mean_dispersal_rate"].append(mean)
        df_dict["std_dispersal_rate"].append(std)

        os.chdir("..")

    dispersal_rates = pd.DataFrame(df_dict)

    plot_dispersal_rates(radii=dispersal_rates["radius"],
                         mean_dispersal_rates=dispersal_rates["mean_dispersal_rate"],
                         std_dispersal_rates=dispersal_rates["std_dispersal_rate"])

run_analysis()