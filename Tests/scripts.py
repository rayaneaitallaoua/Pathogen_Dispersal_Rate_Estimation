import random
from Bio import SeqIO
import subprocess
import os

def generate_gspace_settings(output_dir=".",
                             lattice_size_x=20,
                             lattice_size_y=20,
                             num_sampled_nodes=4,
                             ind_per_node_sampled=5):
    """
    Generates a GSpaceSettings.txt file with random sampling coordinates.

    Parameters:
    - output_dir (str): Name of the output directory where the GSpaceSettings.txt file will be written.
    - lattice_size_x (int): Size of the lattice in X dimension.
    - lattice_size_y (int): Size of the lattice in Y dimension.
    - num_sampled_nodes (int): Number of distinct nodes to sample.
    - ind_per_node_sampled (int): Number of individuals per sampled node.
    """

    # Generate unique random coordinates
    sampled_positions = set()
    while len(sampled_positions) < num_sampled_nodes:
        x = random.randint(1, lattice_size_x)
        y = random.randint(1, lattice_size_y)
        sampled_positions.add((x, y))

    # Separate X and Y coordinates
    sample_x = ",".join(str(pos[0]) for pos in sampled_positions)
    sample_y = ",".join(str(pos[1]) for pos in sampled_positions)

    # GSpace settings content
    gspace_settings = f"""%%%%%%%% SIMULATION SETTINGS %%%%%%%%%%%%%%%
Data_filename=simulated_sequences
Run_Number=1

%%%%%%%% OUTPUT FILE FORMAT SETTINGS %%%%%%%
Output_Dir=../../TestExample_GSpace/results
Coordinate_file=true
Sequence_characteristics_file=true
Fasta=true
Fasta_Single_Line_Seq=True

%%%%%%%% MARKERS SETTINGS %%%%%%%%%%%%%%%%%%
Ploidy=Haploid
Chromosome_number=1
Sequence_Size=1000
Mutation_Model=HKY
Mutation_Rate=0.0005

%%%%%%%% RECOMBINATION SETTINGS %%%%%%%%%%%%
Recombination_Rate=0

%%%%%%%% DEMOGRAPHIC SETTINGS %%%%%%%%%%%%%%
%% LATTICE
Lattice_Size_X={lattice_size_x}
Lattice_Size_Y={lattice_size_y}
Ind_Per_Pop=30

%% DISPERSAL
Dispersal_Distribution=uniform
Disp_Dist_Max=1,1
Total_Emigration_Rate=0.05

%%%%%%%% SAMPLE SETTINGS %%%%%%%%%%%%%%%%%%%
SampleCoordinateX={sample_x}
SampleCoordinateY={sample_y}
Ind_Per_Node_Sampled={ind_per_node_sampled}
"""

    # Write to file
    with open(f'{output_dir}/GSpaceSettings.txt', "w") as f:
        f.write(gspace_settings)

    print(f"GSpaceSettings.txt generated with random sampling coordinates in {output_dir}!")

def generate_beast_xml(fasta_file, output_xml="output.xml", mutation_rate = 5.0E-4, chain_length=10000000):
    records = list(SeqIO.parse(fasta_file, "fasta"))[1:]  # Skip ancestral sequence

    xml = '<?xml version="1.0" standalone="yes"?>\n'
    xml += '<beast version="1.10.4">'
    xml += " <!-- Generated by Rayane Ayoub AIT ALLAOUA - LIRMM 2025                  -->\n\n"

    # Taxa block
    xml += '\t<taxa id="taxa">\n'
    for record in records:
        seq_id = record.id
        parts = seq_id.split('_')
        idx = parts.index('coord')
        lat = float(parts[idx + 1]) + 0.1
        long = float(parts[idx + 2]) + 0.1
        xml += f'\t\t<taxon id="{seq_id}">\n'
        xml += f'\t\t\t<attr name="lat">{lat}</attr>\n'
        xml += f'\t\t\t<attr name="long">{long}</attr>\n'
        xml += f'\t\t</taxon>\n'
    xml += '\t</taxa>\n\n'

    # taxonSet block
    xml += '\t<taxa id="taxonSet">'
    for record in records:
        seq_id = record.id
        xml += f'\t\t<taxon idref="{seq_id}">\n'
    xml += '</taxa>\n\n'

    # Alignment block
    xml += f"\t<!-- ntax={len(records)} | nchar={len(records[0])}-->"
    xml += '\t<alignment id="alignment" dataType="nucleotide">\n'
    for record in records:
        xml += f'\t\t<sequence>\n'
        xml += f'\t\t\t<taxon idref="{record.id}"/>\n'
        xml += f'\t\t\t{str(record.seq)}\n'
        xml += f'\t\t</sequence>\n'
    xml += '\t</alignment>\n\n'

    # patterns block
    xml += """  <!-- The unique patterns from 1 to end                                       -->
        <patterns id="patterns" from="1" strip="false">
            <alignment idref="alignment"/>
	    </patterns>\n\n"""

    # Population size block
    xml += """  <!-- A prior assumption that the population size has remained constant       -->
	    <!-- throughout the time spanned by the genealogy.                           -->
        <constantSize id="constant" units="years">
	        <populationSize>
                <parameter id="constant.popSize" value="1.0" lower="0.0"/>
	        </populationSize>
	    </constantSize>\n\n"""

    # Starting tree block
    xml += """  <!-- Generate a random starting tree under the coalescent process            -->
	    <coalescentSimulator id="startingTree">
	        <coalescentSimulator>
	            <taxa idref="taxonSet"/>
	            <constantSize idref="constant"/>
	        </coalescentSimulator>
	        <taxa idref="taxa"/>
	        <constantSize idref="constant"/>
	    </coalescentSimulator>\n\n"""

    # Tree model block
    xml += """  <!-- Generate a tree model                                                   -->
	    <treeModel id="treeModel">
	        <coalescentTree idref="startingTree"/>
	        <rootHeight>
	            <parameter id="treeModel.rootHeight"/>
	        </rootHeight>
	        <nodeHeights internalNodes="true">
	            <parameter id="treeModel.internalNodeHeights"/>
	        </nodeHeights>
	        <nodeHeights internalNodes="true" rootNode="true">
	            <parameter id="treeModel.allInternalNodeHeights"/>
	        </nodeHeights>
	    </treeModel>

	<!-- Statistic for height of the root of the tree                            -->
	<treeHeightStatistic id="rootHeight">
		<treeModel idref="treeModel"/>
	</treeHeightStatistic>

	<!-- Statistic for sum of the branch lengths of the tree (tree length)       -->
	<treeLengthStatistic id="treeLength">
		<treeModel idref="treeModel"/>
	</treeLengthStatistic>

	<!-- Statistic for time of most recent common ancestor of tree               -->
	<tmrcaStatistic id="age(root)" absolute="true">
		<treeModel idref="treeModel"/>
	</tmrcaStatistic>

	<!-- Taxon Sets                                                              -->

	<tmrcaStatistic id="tmrca(taxonSet)" absolute="false" includeStem="true">
		<mrca>
			<taxa idref="taxonSet"/>
		</mrca>
		<treeModel idref="treeModel"/>
	</tmrcaStatistic>
	<tmrcaStatistic id="age(taxonSet)" absolute="true" includeStem="true">
		<mrca>
			<taxa idref="taxonSet"/>
		</mrca>
		<treeModel idref="treeModel"/>
	</tmrcaStatistic>
	<monophylyStatistic id="monophyly(taxonSet)">
		<mrca>
			<taxa idref="taxonSet"/>
		</mrca>
		<treeModel idref="treeModel"/>
	</monophylyStatistic>\n\n
    """

    # Coalescent likelihood block
    xml += """
    	<!-- Generate a coalescent likelihood                                        -->
	<coalescentLikelihood id="coalescent">
		<model>
			<constantSize idref="constant"/>
		</model>
		<populationTree>
			<treeModel idref="treeModel"/>
		</populationTree>
	</coalescentLikelihood>\n\n
    """

    # Molecular clock
    xml += f"""
    <!-- The uncorrelated relaxed clock (Drummond, Ho, Phillips & Rambaut (2006) PLoS Biology 4, e88 )-->
	<discretizedBranchRates id="branchRates">
		<treeModel idref="treeModel"/>
		<distribution>
			<logNormalDistributionModel meanInRealSpace="true">
				<mean>
					<parameter id="ucld.mean" value="{mutation_rate}"/>
				</mean>
				<stdev>
					<parameter id="ucld.stdev" value="0.3333333333333333" lower="0.0"/>
				</stdev>
			</logNormalDistributionModel>
		</distribution>
		<rateCategories>
			<parameter id="branchRates.categories"/>
		</rateCategories>
	</discretizedBranchRates>

	<rateStatistic id="meanRate" name="meanRate" mode="mean" internal="true" external="true">
		<treeModel idref="treeModel"/>
		<discretizedBranchRates idref="branchRates"/>
	</rateStatistic>

	<rateStatistic id="coefficientOfVariation" name="coefficientOfVariation" mode="coefficientOfVariation" internal="true" external="true">
		<treeModel idref="treeModel"/>
		<discretizedBranchRates idref="branchRates"/>
	</rateStatistic>

	<rateCovarianceStatistic id="covariance" name="covariance">
		<treeModel idref="treeModel"/>
		<discretizedBranchRates idref="branchRates"/>
	</rateCovarianceStatistic>\n\n"""

    # Substitution Model (HKY)
    xml += "<!-- The HKY substitution model (Hasegawa, Kishino & Yano, 1985)             -->"
    xml += '\t<HKYModel id="hky">\n'
    xml += '\t\t<kappa>\n\t\t\t<parameter id="kappa" value="2.0" lower="0.0"/>\n\t\t</kappa>\n'
    xml += """
		<frequencies>
			<frequencyModel dataType="nucleotide">
				<frequencies>
					<parameter id="frequencies" value="0.25 0.25 0.25 0.25"/>
				</frequencies>
			</frequencyModel>
		</frequencies>
    """
    xml += '\t</HKYModel>\n\n'

    # Site Model
    xml += '\t<siteModel>\n'
    xml += '\t\t<substitutionModel>\n'
    xml += '\t\t\t<HKYModel idref="hky"/>'
    xml += '\t\t</substitutionModel>\n'
    xml += '\t</siteModel>\n\n'
    xml += """
    	<statistic id="mu" name="mu">
		    <siteModel idref="siteModel"/>
	    </statistic>\n\n"""

    # Multivariate diffusion model
    xml += """
    <!-- START Multivariate diffusion model                                      -->

	<multivariateDiffusionModel id="coordinates.diffusionModel">
		<precisionMatrix>
			<matrixParameter id="coordinates.precision">
				<parameter id="coordinates.precision.col1" value="0.05 0.002"/>
				<parameter id="coordinates.precision.col2" value="0.002 0.05"/>
			</matrixParameter>
		</precisionMatrix>
	</multivariateDiffusionModel>

	<multivariateWishartPrior id="coordinates.precisionPrior" df="2">
		<scaleMatrix>
			<matrixParameter>
				<parameter value="1.0 0.0"/>
				<parameter value="0.0 1.0"/>
			</matrixParameter>
		</scaleMatrix>
		<data>
			<parameter idref="coordinates.precision"/>
		</data>
	</multivariateWishartPrior>\n
    """

    # trait data likelihood
    xml += """
    <traitDataLikelihood id="coordinates.traitLikelihood" traitName="coordinates" useTreeLength="true" scaleByTime="true" reportAsMultivariate="true" reciprocalRates="false" integrateInternalTraits="true">
		<multivariateDiffusionModel idref="coordinates.diffusionModel"/>
		<treeModel idref="treeModel"/>
		<traitParameter>
			<parameter id="leaf.coordinates"/>
		</traitParameter>
		<conjugateRootPrior>
			<meanParameter>
				<parameter value="0.0 0.0"/>
			</meanParameter>
			<priorSampleSize>
				<parameter value="0.000001"/>
			</priorSampleSize>
		</conjugateRootPrior>
	</traitDataLikelihood>
	<correlation id="coordinates.correlation" dimension1="1" dimension2="2">
		<matrixParameter idref="coordinates.precision"/>
	</correlation>
	<matrixInverse id="coordinates.varCovar">
		<matrixParameter idref="coordinates.precision"/>
	</matrixInverse>
	<traitDataContinuousDiffusionStatistic id="coordinates.diffusionRate" traitName="coordinates" displacementScheme="linear" scalingScheme="dependent" weightingScheme="weighted">
		<traitDataLikelihood idref="coordinates.traitLikelihood"/>
	</traitDataContinuousDiffusionStatistic>

	<!-- END Multivariate diffusion model                                        -->\n\n"""

    # Tree likelihood block

    xml += """
    	<treeDataLikelihood id="treeLikelihood" useAmbiguities="false" usePreOrder="false">
		<partition>
			<patterns idref="patterns"/>
			<siteModel idref="siteModel"/>
		</partition>
		<treeModel idref="treeModel"/>
		<discretizedBranchRates idref="branchRates"/>
	</treeDataLikelihood>\n\n"""

    # Operators block

    xml += """
    	<!-- Define operators                                                        -->
	<operators id="operators" optimizationSchedule="log">
		<scaleOperator scaleFactor="0.75" weight="1">
			<parameter idref="kappa"/>
		</scaleOperator>
		<deltaExchange delta="0.01" weight="1">
			<parameter idref="frequencies"/>
		</deltaExchange>
		<scaleOperator scaleFactor="0.75" weight="3">
			<parameter idref="ucld.stdev"/>
		</scaleOperator>
		<swapOperator size="1" weight="10" autoOptimize="false">
			<parameter idref="branchRates.categories"/>
		</swapOperator>
		<uniformIntegerOperator weight="10">
			<parameter idref="branchRates.categories"/>
		</uniformIntegerOperator>
		<subtreeLeap size="1.0" weight="30">
			<treeModel idref="treeModel"/>
		</subtreeLeap>
		<fixedHeightSubtreePruneRegraft weight="3">
			<treeModel idref="treeModel"/>
		</fixedHeightSubtreePruneRegraft>
		<scaleOperator scaleFactor="0.75" weight="3">
			<parameter idref="constant.popSize"/>
		</scaleOperator>

		<!-- START Multivariate diffusion model                                      -->
		<precisionGibbsOperator weight="2">
			<wishartStatistics traitName="coordinates">
				<traitDataLikelihood idref="coordinates.traitLikelihood"/>
			</wishartStatistics>
			<multivariateWishartPrior idref="coordinates.precisionPrior"/>
		</precisionGibbsOperator>

		<!-- END Multivariate diffusion model                                        -->

	</operators> \n\n"""
    # MCMC Block
    xml += f'\t	<mcmc id="mcmc" chainLength="{chain_length}" autoOptimize="true" operatorAnalysis="...imulated_sequences_Fasta_1_modified_manually.ops">\n'
    xml += f"""
    		<joint id="joint">
			<prior id="prior">
				<logNormalPrior mu="1.0" sigma="1.25" offset="0.0">
					<parameter idref="kappa"/>
				</logNormalPrior>
				<dirichletPrior alpha="1.0" sumsTo="1.0">
					<parameter idref="frequencies"/>
				</dirichletPrior>
				<exponentialPrior mean="0.3333333333333333" offset="0.0">
					<parameter idref="ucld.stdev"/>
				</exponentialPrior>
				<gammaPrior shape="0.001" scale="1000.0" offset="0.0">
					<parameter idref="constant.popSize"/>
				</gammaPrior>
				<coalescentLikelihood idref="coalescent"/>


				<discretizedBranchRates idref="branchRates"/>

				<!-- START Multivariate diffusion model                                      -->
				<multivariateWishartPrior idref="coordinates.precisionPrior"/>

				<!-- END Multivariate diffusion model                                        -->

			</prior>
			<likelihood id="likelihood">
				<treeDataLikelihood idref="treeLikelihood"/>

				<!-- START Multivariate diffusion model                                      -->
				<traitDataLikelihood idref="coordinates.traitLikelihood"/>

				<!-- END Multivariate diffusion model                                        -->

			</likelihood>
		</joint>
		<operators idref="operators"/>

		<!-- write log to screen                                                     -->
		<log id="screenLog" logEvery="1000">
			<column label="Joint" dp="4" width="12">
				<joint idref="joint"/>
			</column>
			<column label="Prior" dp="4" width="12">
				<prior idref="prior"/>
			</column>
			<column label="Likelihood" dp="4" width="12">
				<likelihood idref="likelihood"/>
			</column>
			<column label="age(root)" sf="6" width="12">
				<tmrcaStatistic idref="age(root)"/>
			</column>
		</log>

		<!-- write log to file                                                       -->
		<log id="fileLog" logEvery="1000" fileName="...imulated_sequences_Fasta_1_modified_manually.log" overwrite="false">
			<joint idref="joint"/>
			<prior idref="prior"/>
			<likelihood idref="likelihood"/>
			<treeHeightStatistic idref="rootHeight"/>
			<tmrcaStatistic idref="age(root)"/>
			<treeLengthStatistic idref="treeLength"/>
			<tmrcaStatistic idref="tmrca(taxonSet)"/>
			<tmrcaStatistic idref="age(taxonSet)"/>
			<parameter idref="constant.popSize"/>
			<parameter idref="kappa"/>
			<parameter idref="frequencies"/>
			<parameter idref="ucld.mean"/>
			<parameter idref="ucld.stdev"/>
			<rateStatistic idref="meanRate"/>
			<rateStatistic idref="coefficientOfVariation"/>
			<rateCovarianceStatistic idref="covariance"/>

			<!-- START Multivariate diffusion model                                      -->
			<matrixParameter idref="coordinates.precision"/>
			<correlation idref="coordinates.correlation"/>
			<matrixInverse idref="coordinates.varCovar"/>
			<traitDataContinuousDiffusionStatistic idref="coordinates.diffusionRate"/>

			<!-- END Multivariate diffusion model                                        -->

			<treeDataLikelihood idref="treeLikelihood"/>
			<discretizedBranchRates idref="branchRates"/>

			<!-- START Multivariate diffusion model                                      -->
			<traitDataLikelihood idref="coordinates.traitLikelihood"/>

			<!-- END Multivariate diffusion model                                        -->

			<coalescentLikelihood idref="coalescent"/>

		</log>

		<!-- write tree log to file                                                  -->
		<logTree id="treeFileLog" logEvery="1000" nexusFormat="true" fileName="Example_simulated_sequences_Fasta_1_modified_manually.trees" sortTranslationTable="true">
			<treeModel idref="treeModel"/>
			<trait name="rate" tag="rate">
				<discretizedBranchRates idref="branchRates"/>
			</trait>
			<joint idref="joint"/>

			<!-- START Ancestral state reconstruction                                    -->
			<trait name="coordinates" tag="coordinates">
				<traitDataLikelihood idref="coordinates.traitLikelihood"/>
			</trait>

			<!-- END Ancestral state reconstruction                                      -->


			<!-- START Multivariate diffusion model                                      -->
			<multivariateDiffusionModel idref="coordinates.diffusionModel"/>
			<traitDataLikelihood idref="coordinates.traitLikelihood"/>

			<!-- END Multivariate diffusion model                                        -->

		</logTree>

		<!-- write state of Markov chain to checkpoint file                          -->
		<logCheckpoint id="checkpointFileLog" checkpointEvery="{chain_length/10}" checkpointFinal="{chain_length}" fileName="...ulated_sequences_Fasta_1_modified_manually.chkpt" overwrite="false"/>
	</mcmc>"""

    xml += '</beast>\n'

    with open(output_xml, 'w') as f:
        f.write(xml)

    print(f"BEAST XML generated: {output_xml}")

def run_GSpace(gspace_settings_dir=".",
               gspace_dir="../GSpace/build/GSpace",
               lattice_size_x=20,
               lattice_size_y=20,
               num_sampled_nodes=5,
               ind_per_node_sampled=5):

    """
    :param gspace_settings_dir: location of GSpaceSettings.txt. Results will be written to this directory.
    :param gspace_dir: location of GSpace executable relative to gspace_settings_dir
    :param lattice_size_x:
    :param lattice_size_y:
    :param num_sampled_nodes:
    :param ind_per_node_sampled:
    """

    # 1. Set working directory
    os.chdir(gspace_settings_dir)
    cwd = os.getcwd()
    print(f"current working directory = {cwd}")

    # 2. Generate GSpaceSettings.txt
    generate_gspace_settings(
        output_dir=gspace_settings_dir,
        lattice_size_x=lattice_size_x,
        lattice_size_y=lattice_size_y,
        num_sampled_nodes=num_sampled_nodes,
        ind_per_node_sampled=ind_per_node_sampled
    )

    # 3. Get GSpace executable
    gspace_executable = f"{gspace_dir}"

    # 4. Check if executable exists and run
    if os.path.isfile(gspace_executable):
        subprocess.run([gspace_executable])
    else:
        print(f"Error: {gspace_executable} not found.")

run_GSpace(gspace_dir="../../GSpace/build/GSpace")

generate_beast_xml(fasta_file="simulated_sequences_Fasta_1.fa")